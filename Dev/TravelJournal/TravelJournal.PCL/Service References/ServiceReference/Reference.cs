//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34011
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TravelJournal.PCL.ServiceReference {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ConnectionTestData", Namespace="http://schemas.datacontract.org/2004/07/TravelJournal.WinForm.Simulator")]
    public partial class ConnectionTestData : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.Collections.Generic.List<int> DataField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<int> Data {
            get {
                return this.DataField;
            }
            set {
                if ((object.ReferenceEquals(this.DataField, value) != true)) {
                    this.DataField = value;
                    this.RaisePropertyChanged("Data");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LogType", Namespace="http://schemas.datacontract.org/2004/07/TravelJournal.WinForm.Simulator.Controls")]
    public enum LogType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Info = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Error = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Warning = 2,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Album", Namespace="http://schemas.datacontract.org/2004/07/TravelJournal.PCL.DataService")]
    public partial class Album : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string NameField;
        
        private System.Collections.Generic.List<TravelJournal.PCL.ServiceReference.Photo> PhotoListField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<TravelJournal.PCL.ServiceReference.Photo> PhotoList {
            get {
                return this.PhotoListField;
            }
            set {
                if ((object.ReferenceEquals(this.PhotoListField, value) != true)) {
                    this.PhotoListField = value;
                    this.RaisePropertyChanged("PhotoList");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Photo", Namespace="http://schemas.datacontract.org/2004/07/TravelJournal.PCL.DataService")]
    public partial class Photo : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string NameField;
        
        private TravelJournal.PCL.ServiceReference.GpsPoint PointField;
        
        private TravelJournal.PCL.ServiceReference.GpsPosition PositionField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TravelJournal.PCL.ServiceReference.GpsPoint Point {
            get {
                return this.PointField;
            }
            set {
                if ((object.ReferenceEquals(this.PointField, value) != true)) {
                    this.PointField = value;
                    this.RaisePropertyChanged("Point");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TravelJournal.PCL.ServiceReference.GpsPosition Position {
            get {
                return this.PositionField;
            }
            set {
                if ((object.ReferenceEquals(this.PositionField, value) != true)) {
                    this.PositionField = value;
                    this.RaisePropertyChanged("Position");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GpsPoint", Namespace="http://schemas.datacontract.org/2004/07/TravelJournal.PCL.DataService")]
    public partial class GpsPoint : object, System.ComponentModel.INotifyPropertyChanged {
        
        private double LatitudeField;
        
        private double LongitudeField;
        
        private System.DateTime TimeStampField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Latitude {
            get {
                return this.LatitudeField;
            }
            set {
                if ((this.LatitudeField.Equals(value) != true)) {
                    this.LatitudeField = value;
                    this.RaisePropertyChanged("Latitude");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Longitude {
            get {
                return this.LongitudeField;
            }
            set {
                if ((this.LongitudeField.Equals(value) != true)) {
                    this.LongitudeField = value;
                    this.RaisePropertyChanged("Longitude");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime TimeStamp {
            get {
                return this.TimeStampField;
            }
            set {
                if ((this.TimeStampField.Equals(value) != true)) {
                    this.TimeStampField = value;
                    this.RaisePropertyChanged("TimeStamp");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GpsPosition", Namespace="http://schemas.datacontract.org/2004/07/TravelJournal.PCL.DataService")]
    public partial class GpsPosition : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string CityField;
        
        private string CountryField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string City {
            get {
                return this.CityField;
            }
            set {
                if ((object.ReferenceEquals(this.CityField, value) != true)) {
                    this.CityField = value;
                    this.RaisePropertyChanged("City");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Country {
            get {
                return this.CountryField;
            }
            set {
                if ((object.ReferenceEquals(this.CountryField, value) != true)) {
                    this.CountryField = value;
                    this.RaisePropertyChanged("Country");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference.ISimulationServices")]
    public interface ISimulationServices {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISimulationServices/Connect", ReplyAction="http://tempuri.org/ISimulationServices/ConnectResponse")]
        System.IAsyncResult BeginConnect(string deviceName, System.AsyncCallback callback, object asyncState);
        
        bool EndConnect(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISimulationServices/Disconnect", ReplyAction="http://tempuri.org/ISimulationServices/DisconnectResponse")]
        System.IAsyncResult BeginDisconnect(string deviceName, System.AsyncCallback callback, object asyncState);
        
        bool EndDisconnect(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISimulationServices/PrepareTestData", ReplyAction="http://tempuri.org/ISimulationServices/PrepareTestDataResponse")]
        System.IAsyncResult BeginPrepareTestData(int size, System.AsyncCallback callback, object asyncState);
        
        void EndPrepareTestData(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISimulationServices/GetTestData", ReplyAction="http://tempuri.org/ISimulationServices/GetTestDataResponse")]
        System.IAsyncResult BeginGetTestData(System.AsyncCallback callback, object asyncState);
        
        TravelJournal.PCL.ServiceReference.ConnectionTestData EndGetTestData(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISimulationServices/ReportLatency", ReplyAction="http://tempuri.org/ISimulationServices/ReportLatencyResponse")]
        System.IAsyncResult BeginReportLatency(decimal latency, System.AsyncCallback callback, object asyncState);
        
        void EndReportLatency(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISimulationServices/Log", ReplyAction="http://tempuri.org/ISimulationServices/LogResponse")]
        System.IAsyncResult BeginLog(TravelJournal.PCL.ServiceReference.LogType type, string log, string callerName, string callerFilePath, int callerLine, System.AsyncCallback callback, object asyncState);
        
        void EndLog(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISimulationServices/UpdateInfoInspector", ReplyAction="http://tempuri.org/ISimulationServices/UpdateInfoInspectorResponse")]
        System.IAsyncResult BeginUpdateInfoInspector(System.Collections.Generic.Dictionary<string, object> infos, System.AsyncCallback callback, object asyncState);
        
        void EndUpdateInfoInspector(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISimulationServices/UpdatePhotoTreeView", ReplyAction="http://tempuri.org/ISimulationServices/UpdatePhotoTreeViewResponse")]
        System.IAsyncResult BeginUpdatePhotoTreeView(System.Collections.Generic.List<TravelJournal.PCL.ServiceReference.Album> albums, System.AsyncCallback callback, object asyncState);
        
        void EndUpdatePhotoTreeView(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISimulationServices/GetCurrentGps", ReplyAction="http://tempuri.org/ISimulationServices/GetCurrentGpsResponse")]
        System.IAsyncResult BeginGetCurrentGps(System.AsyncCallback callback, object asyncState);
        
        TravelJournal.PCL.ServiceReference.GpsPoint EndGetCurrentGps(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISimulationServices/GetPhotos", ReplyAction="http://tempuri.org/ISimulationServices/GetPhotosResponse")]
        System.IAsyncResult BeginGetPhotos(System.DateTime filter, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<TravelJournal.PCL.ServiceReference.Photo> EndGetPhotos(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ISimulationServicesChannel : TravelJournal.PCL.ServiceReference.ISimulationServices, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ConnectCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ConnectCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DisconnectCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DisconnectCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetTestDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetTestDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TravelJournal.PCL.ServiceReference.ConnectionTestData Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TravelJournal.PCL.ServiceReference.ConnectionTestData)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetCurrentGpsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetCurrentGpsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TravelJournal.PCL.ServiceReference.GpsPoint Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TravelJournal.PCL.ServiceReference.GpsPoint)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetPhotosCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetPhotosCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<TravelJournal.PCL.ServiceReference.Photo> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<TravelJournal.PCL.ServiceReference.Photo>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SimulationServicesClient : System.ServiceModel.ClientBase<TravelJournal.PCL.ServiceReference.ISimulationServices>, TravelJournal.PCL.ServiceReference.ISimulationServices {
        
        private BeginOperationDelegate onBeginConnectDelegate;
        
        private EndOperationDelegate onEndConnectDelegate;
        
        private System.Threading.SendOrPostCallback onConnectCompletedDelegate;
        
        private BeginOperationDelegate onBeginDisconnectDelegate;
        
        private EndOperationDelegate onEndDisconnectDelegate;
        
        private System.Threading.SendOrPostCallback onDisconnectCompletedDelegate;
        
        private BeginOperationDelegate onBeginPrepareTestDataDelegate;
        
        private EndOperationDelegate onEndPrepareTestDataDelegate;
        
        private System.Threading.SendOrPostCallback onPrepareTestDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetTestDataDelegate;
        
        private EndOperationDelegate onEndGetTestDataDelegate;
        
        private System.Threading.SendOrPostCallback onGetTestDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginReportLatencyDelegate;
        
        private EndOperationDelegate onEndReportLatencyDelegate;
        
        private System.Threading.SendOrPostCallback onReportLatencyCompletedDelegate;
        
        private BeginOperationDelegate onBeginLogDelegate;
        
        private EndOperationDelegate onEndLogDelegate;
        
        private System.Threading.SendOrPostCallback onLogCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateInfoInspectorDelegate;
        
        private EndOperationDelegate onEndUpdateInfoInspectorDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateInfoInspectorCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdatePhotoTreeViewDelegate;
        
        private EndOperationDelegate onEndUpdatePhotoTreeViewDelegate;
        
        private System.Threading.SendOrPostCallback onUpdatePhotoTreeViewCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetCurrentGpsDelegate;
        
        private EndOperationDelegate onEndGetCurrentGpsDelegate;
        
        private System.Threading.SendOrPostCallback onGetCurrentGpsCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetPhotosDelegate;
        
        private EndOperationDelegate onEndGetPhotosDelegate;
        
        private System.Threading.SendOrPostCallback onGetPhotosCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public SimulationServicesClient() : 
                base(SimulationServicesClient.GetDefaultBinding(), SimulationServicesClient.GetDefaultEndpointAddress()) {
        }
        
        public SimulationServicesClient(EndpointConfiguration endpointConfiguration) : 
                base(SimulationServicesClient.GetBindingForEndpoint(endpointConfiguration), SimulationServicesClient.GetEndpointAddress(endpointConfiguration)) {
        }
        
        public SimulationServicesClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(SimulationServicesClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress)) {
        }
        
        public SimulationServicesClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(SimulationServicesClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress) {
        }
        
        public SimulationServicesClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<ConnectCompletedEventArgs> ConnectCompleted;
        
        public event System.EventHandler<DisconnectCompletedEventArgs> DisconnectCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> PrepareTestDataCompleted;
        
        public event System.EventHandler<GetTestDataCompletedEventArgs> GetTestDataCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> ReportLatencyCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> LogCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> UpdateInfoInspectorCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> UpdatePhotoTreeViewCompleted;
        
        public event System.EventHandler<GetCurrentGpsCompletedEventArgs> GetCurrentGpsCompleted;
        
        public event System.EventHandler<GetPhotosCompletedEventArgs> GetPhotosCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TravelJournal.PCL.ServiceReference.ISimulationServices.BeginConnect(string deviceName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginConnect(deviceName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool TravelJournal.PCL.ServiceReference.ISimulationServices.EndConnect(System.IAsyncResult result) {
            return base.Channel.EndConnect(result);
        }
        
        private System.IAsyncResult OnBeginConnect(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string deviceName = ((string)(inValues[0]));
            return ((TravelJournal.PCL.ServiceReference.ISimulationServices)(this)).BeginConnect(deviceName, callback, asyncState);
        }
        
        private object[] OnEndConnect(System.IAsyncResult result) {
            bool retVal = ((TravelJournal.PCL.ServiceReference.ISimulationServices)(this)).EndConnect(result);
            return new object[] {
                    retVal};
        }
        
        private void OnConnectCompleted(object state) {
            if ((this.ConnectCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ConnectCompleted(this, new ConnectCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ConnectAsync(string deviceName) {
            this.ConnectAsync(deviceName, null);
        }
        
        public void ConnectAsync(string deviceName, object userState) {
            if ((this.onBeginConnectDelegate == null)) {
                this.onBeginConnectDelegate = new BeginOperationDelegate(this.OnBeginConnect);
            }
            if ((this.onEndConnectDelegate == null)) {
                this.onEndConnectDelegate = new EndOperationDelegate(this.OnEndConnect);
            }
            if ((this.onConnectCompletedDelegate == null)) {
                this.onConnectCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnConnectCompleted);
            }
            base.InvokeAsync(this.onBeginConnectDelegate, new object[] {
                        deviceName}, this.onEndConnectDelegate, this.onConnectCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TravelJournal.PCL.ServiceReference.ISimulationServices.BeginDisconnect(string deviceName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDisconnect(deviceName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool TravelJournal.PCL.ServiceReference.ISimulationServices.EndDisconnect(System.IAsyncResult result) {
            return base.Channel.EndDisconnect(result);
        }
        
        private System.IAsyncResult OnBeginDisconnect(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string deviceName = ((string)(inValues[0]));
            return ((TravelJournal.PCL.ServiceReference.ISimulationServices)(this)).BeginDisconnect(deviceName, callback, asyncState);
        }
        
        private object[] OnEndDisconnect(System.IAsyncResult result) {
            bool retVal = ((TravelJournal.PCL.ServiceReference.ISimulationServices)(this)).EndDisconnect(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDisconnectCompleted(object state) {
            if ((this.DisconnectCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DisconnectCompleted(this, new DisconnectCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DisconnectAsync(string deviceName) {
            this.DisconnectAsync(deviceName, null);
        }
        
        public void DisconnectAsync(string deviceName, object userState) {
            if ((this.onBeginDisconnectDelegate == null)) {
                this.onBeginDisconnectDelegate = new BeginOperationDelegate(this.OnBeginDisconnect);
            }
            if ((this.onEndDisconnectDelegate == null)) {
                this.onEndDisconnectDelegate = new EndOperationDelegate(this.OnEndDisconnect);
            }
            if ((this.onDisconnectCompletedDelegate == null)) {
                this.onDisconnectCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDisconnectCompleted);
            }
            base.InvokeAsync(this.onBeginDisconnectDelegate, new object[] {
                        deviceName}, this.onEndDisconnectDelegate, this.onDisconnectCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TravelJournal.PCL.ServiceReference.ISimulationServices.BeginPrepareTestData(int size, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginPrepareTestData(size, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void TravelJournal.PCL.ServiceReference.ISimulationServices.EndPrepareTestData(System.IAsyncResult result) {
            base.Channel.EndPrepareTestData(result);
        }
        
        private System.IAsyncResult OnBeginPrepareTestData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int size = ((int)(inValues[0]));
            return ((TravelJournal.PCL.ServiceReference.ISimulationServices)(this)).BeginPrepareTestData(size, callback, asyncState);
        }
        
        private object[] OnEndPrepareTestData(System.IAsyncResult result) {
            ((TravelJournal.PCL.ServiceReference.ISimulationServices)(this)).EndPrepareTestData(result);
            return null;
        }
        
        private void OnPrepareTestDataCompleted(object state) {
            if ((this.PrepareTestDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.PrepareTestDataCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void PrepareTestDataAsync(int size) {
            this.PrepareTestDataAsync(size, null);
        }
        
        public void PrepareTestDataAsync(int size, object userState) {
            if ((this.onBeginPrepareTestDataDelegate == null)) {
                this.onBeginPrepareTestDataDelegate = new BeginOperationDelegate(this.OnBeginPrepareTestData);
            }
            if ((this.onEndPrepareTestDataDelegate == null)) {
                this.onEndPrepareTestDataDelegate = new EndOperationDelegate(this.OnEndPrepareTestData);
            }
            if ((this.onPrepareTestDataCompletedDelegate == null)) {
                this.onPrepareTestDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnPrepareTestDataCompleted);
            }
            base.InvokeAsync(this.onBeginPrepareTestDataDelegate, new object[] {
                        size}, this.onEndPrepareTestDataDelegate, this.onPrepareTestDataCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TravelJournal.PCL.ServiceReference.ISimulationServices.BeginGetTestData(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetTestData(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TravelJournal.PCL.ServiceReference.ConnectionTestData TravelJournal.PCL.ServiceReference.ISimulationServices.EndGetTestData(System.IAsyncResult result) {
            return base.Channel.EndGetTestData(result);
        }
        
        private System.IAsyncResult OnBeginGetTestData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((TravelJournal.PCL.ServiceReference.ISimulationServices)(this)).BeginGetTestData(callback, asyncState);
        }
        
        private object[] OnEndGetTestData(System.IAsyncResult result) {
            TravelJournal.PCL.ServiceReference.ConnectionTestData retVal = ((TravelJournal.PCL.ServiceReference.ISimulationServices)(this)).EndGetTestData(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetTestDataCompleted(object state) {
            if ((this.GetTestDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetTestDataCompleted(this, new GetTestDataCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetTestDataAsync() {
            this.GetTestDataAsync(null);
        }
        
        public void GetTestDataAsync(object userState) {
            if ((this.onBeginGetTestDataDelegate == null)) {
                this.onBeginGetTestDataDelegate = new BeginOperationDelegate(this.OnBeginGetTestData);
            }
            if ((this.onEndGetTestDataDelegate == null)) {
                this.onEndGetTestDataDelegate = new EndOperationDelegate(this.OnEndGetTestData);
            }
            if ((this.onGetTestDataCompletedDelegate == null)) {
                this.onGetTestDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetTestDataCompleted);
            }
            base.InvokeAsync(this.onBeginGetTestDataDelegate, null, this.onEndGetTestDataDelegate, this.onGetTestDataCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TravelJournal.PCL.ServiceReference.ISimulationServices.BeginReportLatency(decimal latency, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginReportLatency(latency, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void TravelJournal.PCL.ServiceReference.ISimulationServices.EndReportLatency(System.IAsyncResult result) {
            base.Channel.EndReportLatency(result);
        }
        
        private System.IAsyncResult OnBeginReportLatency(object[] inValues, System.AsyncCallback callback, object asyncState) {
            decimal latency = ((decimal)(inValues[0]));
            return ((TravelJournal.PCL.ServiceReference.ISimulationServices)(this)).BeginReportLatency(latency, callback, asyncState);
        }
        
        private object[] OnEndReportLatency(System.IAsyncResult result) {
            ((TravelJournal.PCL.ServiceReference.ISimulationServices)(this)).EndReportLatency(result);
            return null;
        }
        
        private void OnReportLatencyCompleted(object state) {
            if ((this.ReportLatencyCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ReportLatencyCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ReportLatencyAsync(decimal latency) {
            this.ReportLatencyAsync(latency, null);
        }
        
        public void ReportLatencyAsync(decimal latency, object userState) {
            if ((this.onBeginReportLatencyDelegate == null)) {
                this.onBeginReportLatencyDelegate = new BeginOperationDelegate(this.OnBeginReportLatency);
            }
            if ((this.onEndReportLatencyDelegate == null)) {
                this.onEndReportLatencyDelegate = new EndOperationDelegate(this.OnEndReportLatency);
            }
            if ((this.onReportLatencyCompletedDelegate == null)) {
                this.onReportLatencyCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnReportLatencyCompleted);
            }
            base.InvokeAsync(this.onBeginReportLatencyDelegate, new object[] {
                        latency}, this.onEndReportLatencyDelegate, this.onReportLatencyCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TravelJournal.PCL.ServiceReference.ISimulationServices.BeginLog(TravelJournal.PCL.ServiceReference.LogType type, string log, string callerName, string callerFilePath, int callerLine, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginLog(type, log, callerName, callerFilePath, callerLine, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void TravelJournal.PCL.ServiceReference.ISimulationServices.EndLog(System.IAsyncResult result) {
            base.Channel.EndLog(result);
        }
        
        private System.IAsyncResult OnBeginLog(object[] inValues, System.AsyncCallback callback, object asyncState) {
            TravelJournal.PCL.ServiceReference.LogType type = ((TravelJournal.PCL.ServiceReference.LogType)(inValues[0]));
            string log = ((string)(inValues[1]));
            string callerName = ((string)(inValues[2]));
            string callerFilePath = ((string)(inValues[3]));
            int callerLine = ((int)(inValues[4]));
            return ((TravelJournal.PCL.ServiceReference.ISimulationServices)(this)).BeginLog(type, log, callerName, callerFilePath, callerLine, callback, asyncState);
        }
        
        private object[] OnEndLog(System.IAsyncResult result) {
            ((TravelJournal.PCL.ServiceReference.ISimulationServices)(this)).EndLog(result);
            return null;
        }
        
        private void OnLogCompleted(object state) {
            if ((this.LogCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.LogCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void LogAsync(TravelJournal.PCL.ServiceReference.LogType type, string log, string callerName, string callerFilePath, int callerLine) {
            this.LogAsync(type, log, callerName, callerFilePath, callerLine, null);
        }
        
        public void LogAsync(TravelJournal.PCL.ServiceReference.LogType type, string log, string callerName, string callerFilePath, int callerLine, object userState) {
            if ((this.onBeginLogDelegate == null)) {
                this.onBeginLogDelegate = new BeginOperationDelegate(this.OnBeginLog);
            }
            if ((this.onEndLogDelegate == null)) {
                this.onEndLogDelegate = new EndOperationDelegate(this.OnEndLog);
            }
            if ((this.onLogCompletedDelegate == null)) {
                this.onLogCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnLogCompleted);
            }
            base.InvokeAsync(this.onBeginLogDelegate, new object[] {
                        type,
                        log,
                        callerName,
                        callerFilePath,
                        callerLine}, this.onEndLogDelegate, this.onLogCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TravelJournal.PCL.ServiceReference.ISimulationServices.BeginUpdateInfoInspector(System.Collections.Generic.Dictionary<string, object> infos, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateInfoInspector(infos, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void TravelJournal.PCL.ServiceReference.ISimulationServices.EndUpdateInfoInspector(System.IAsyncResult result) {
            base.Channel.EndUpdateInfoInspector(result);
        }
        
        private System.IAsyncResult OnBeginUpdateInfoInspector(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Collections.Generic.Dictionary<string, object> infos = ((System.Collections.Generic.Dictionary<string, object>)(inValues[0]));
            return ((TravelJournal.PCL.ServiceReference.ISimulationServices)(this)).BeginUpdateInfoInspector(infos, callback, asyncState);
        }
        
        private object[] OnEndUpdateInfoInspector(System.IAsyncResult result) {
            ((TravelJournal.PCL.ServiceReference.ISimulationServices)(this)).EndUpdateInfoInspector(result);
            return null;
        }
        
        private void OnUpdateInfoInspectorCompleted(object state) {
            if ((this.UpdateInfoInspectorCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateInfoInspectorCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateInfoInspectorAsync(System.Collections.Generic.Dictionary<string, object> infos) {
            this.UpdateInfoInspectorAsync(infos, null);
        }
        
        public void UpdateInfoInspectorAsync(System.Collections.Generic.Dictionary<string, object> infos, object userState) {
            if ((this.onBeginUpdateInfoInspectorDelegate == null)) {
                this.onBeginUpdateInfoInspectorDelegate = new BeginOperationDelegate(this.OnBeginUpdateInfoInspector);
            }
            if ((this.onEndUpdateInfoInspectorDelegate == null)) {
                this.onEndUpdateInfoInspectorDelegate = new EndOperationDelegate(this.OnEndUpdateInfoInspector);
            }
            if ((this.onUpdateInfoInspectorCompletedDelegate == null)) {
                this.onUpdateInfoInspectorCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateInfoInspectorCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateInfoInspectorDelegate, new object[] {
                        infos}, this.onEndUpdateInfoInspectorDelegate, this.onUpdateInfoInspectorCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TravelJournal.PCL.ServiceReference.ISimulationServices.BeginUpdatePhotoTreeView(System.Collections.Generic.List<TravelJournal.PCL.ServiceReference.Album> albums, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdatePhotoTreeView(albums, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void TravelJournal.PCL.ServiceReference.ISimulationServices.EndUpdatePhotoTreeView(System.IAsyncResult result) {
            base.Channel.EndUpdatePhotoTreeView(result);
        }
        
        private System.IAsyncResult OnBeginUpdatePhotoTreeView(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Collections.Generic.List<TravelJournal.PCL.ServiceReference.Album> albums = ((System.Collections.Generic.List<TravelJournal.PCL.ServiceReference.Album>)(inValues[0]));
            return ((TravelJournal.PCL.ServiceReference.ISimulationServices)(this)).BeginUpdatePhotoTreeView(albums, callback, asyncState);
        }
        
        private object[] OnEndUpdatePhotoTreeView(System.IAsyncResult result) {
            ((TravelJournal.PCL.ServiceReference.ISimulationServices)(this)).EndUpdatePhotoTreeView(result);
            return null;
        }
        
        private void OnUpdatePhotoTreeViewCompleted(object state) {
            if ((this.UpdatePhotoTreeViewCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdatePhotoTreeViewCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdatePhotoTreeViewAsync(System.Collections.Generic.List<TravelJournal.PCL.ServiceReference.Album> albums) {
            this.UpdatePhotoTreeViewAsync(albums, null);
        }
        
        public void UpdatePhotoTreeViewAsync(System.Collections.Generic.List<TravelJournal.PCL.ServiceReference.Album> albums, object userState) {
            if ((this.onBeginUpdatePhotoTreeViewDelegate == null)) {
                this.onBeginUpdatePhotoTreeViewDelegate = new BeginOperationDelegate(this.OnBeginUpdatePhotoTreeView);
            }
            if ((this.onEndUpdatePhotoTreeViewDelegate == null)) {
                this.onEndUpdatePhotoTreeViewDelegate = new EndOperationDelegate(this.OnEndUpdatePhotoTreeView);
            }
            if ((this.onUpdatePhotoTreeViewCompletedDelegate == null)) {
                this.onUpdatePhotoTreeViewCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdatePhotoTreeViewCompleted);
            }
            base.InvokeAsync(this.onBeginUpdatePhotoTreeViewDelegate, new object[] {
                        albums}, this.onEndUpdatePhotoTreeViewDelegate, this.onUpdatePhotoTreeViewCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TravelJournal.PCL.ServiceReference.ISimulationServices.BeginGetCurrentGps(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetCurrentGps(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TravelJournal.PCL.ServiceReference.GpsPoint TravelJournal.PCL.ServiceReference.ISimulationServices.EndGetCurrentGps(System.IAsyncResult result) {
            return base.Channel.EndGetCurrentGps(result);
        }
        
        private System.IAsyncResult OnBeginGetCurrentGps(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((TravelJournal.PCL.ServiceReference.ISimulationServices)(this)).BeginGetCurrentGps(callback, asyncState);
        }
        
        private object[] OnEndGetCurrentGps(System.IAsyncResult result) {
            TravelJournal.PCL.ServiceReference.GpsPoint retVal = ((TravelJournal.PCL.ServiceReference.ISimulationServices)(this)).EndGetCurrentGps(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetCurrentGpsCompleted(object state) {
            if ((this.GetCurrentGpsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetCurrentGpsCompleted(this, new GetCurrentGpsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetCurrentGpsAsync() {
            this.GetCurrentGpsAsync(null);
        }
        
        public void GetCurrentGpsAsync(object userState) {
            if ((this.onBeginGetCurrentGpsDelegate == null)) {
                this.onBeginGetCurrentGpsDelegate = new BeginOperationDelegate(this.OnBeginGetCurrentGps);
            }
            if ((this.onEndGetCurrentGpsDelegate == null)) {
                this.onEndGetCurrentGpsDelegate = new EndOperationDelegate(this.OnEndGetCurrentGps);
            }
            if ((this.onGetCurrentGpsCompletedDelegate == null)) {
                this.onGetCurrentGpsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetCurrentGpsCompleted);
            }
            base.InvokeAsync(this.onBeginGetCurrentGpsDelegate, null, this.onEndGetCurrentGpsDelegate, this.onGetCurrentGpsCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TravelJournal.PCL.ServiceReference.ISimulationServices.BeginGetPhotos(System.DateTime filter, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetPhotos(filter, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.List<TravelJournal.PCL.ServiceReference.Photo> TravelJournal.PCL.ServiceReference.ISimulationServices.EndGetPhotos(System.IAsyncResult result) {
            return base.Channel.EndGetPhotos(result);
        }
        
        private System.IAsyncResult OnBeginGetPhotos(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.DateTime filter = ((System.DateTime)(inValues[0]));
            return ((TravelJournal.PCL.ServiceReference.ISimulationServices)(this)).BeginGetPhotos(filter, callback, asyncState);
        }
        
        private object[] OnEndGetPhotos(System.IAsyncResult result) {
            System.Collections.Generic.List<TravelJournal.PCL.ServiceReference.Photo> retVal = ((TravelJournal.PCL.ServiceReference.ISimulationServices)(this)).EndGetPhotos(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetPhotosCompleted(object state) {
            if ((this.GetPhotosCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetPhotosCompleted(this, new GetPhotosCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetPhotosAsync(System.DateTime filter) {
            this.GetPhotosAsync(filter, null);
        }
        
        public void GetPhotosAsync(System.DateTime filter, object userState) {
            if ((this.onBeginGetPhotosDelegate == null)) {
                this.onBeginGetPhotosDelegate = new BeginOperationDelegate(this.OnBeginGetPhotos);
            }
            if ((this.onEndGetPhotosDelegate == null)) {
                this.onEndGetPhotosDelegate = new EndOperationDelegate(this.OnEndGetPhotos);
            }
            if ((this.onGetPhotosCompletedDelegate == null)) {
                this.onGetPhotosCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetPhotosCompleted);
            }
            base.InvokeAsync(this.onBeginGetPhotosDelegate, new object[] {
                        filter}, this.onEndGetPhotosDelegate, this.onGetPhotosCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override TravelJournal.PCL.ServiceReference.ISimulationServices CreateChannel() {
            return new SimulationServicesClientChannel(this);
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_ISimulationServices)) {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.MaxReceivedMessageSize = int.MaxValue;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_ISimulationServices)) {
                return new System.ServiceModel.EndpointAddress("http://192.168.1.23:8733/Design_Time_Addresses/TravelJournal.WinForm.Simulator/Si" +
                        "mulationServices");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding() {
            return SimulationServicesClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_ISimulationServices);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress() {
            return SimulationServicesClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_ISimulationServices);
        }
        
        private class SimulationServicesClientChannel : ChannelBase<TravelJournal.PCL.ServiceReference.ISimulationServices>, TravelJournal.PCL.ServiceReference.ISimulationServices {
            
            public SimulationServicesClientChannel(System.ServiceModel.ClientBase<TravelJournal.PCL.ServiceReference.ISimulationServices> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginConnect(string deviceName, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = deviceName;
                System.IAsyncResult _result = base.BeginInvoke("Connect", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndConnect(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("Connect", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginDisconnect(string deviceName, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = deviceName;
                System.IAsyncResult _result = base.BeginInvoke("Disconnect", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndDisconnect(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("Disconnect", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginPrepareTestData(int size, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = size;
                System.IAsyncResult _result = base.BeginInvoke("PrepareTestData", _args, callback, asyncState);
                return _result;
            }
            
            public void EndPrepareTestData(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("PrepareTestData", _args, result);
            }
            
            public System.IAsyncResult BeginGetTestData(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetTestData", _args, callback, asyncState);
                return _result;
            }
            
            public TravelJournal.PCL.ServiceReference.ConnectionTestData EndGetTestData(System.IAsyncResult result) {
                object[] _args = new object[0];
                TravelJournal.PCL.ServiceReference.ConnectionTestData _result = ((TravelJournal.PCL.ServiceReference.ConnectionTestData)(base.EndInvoke("GetTestData", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginReportLatency(decimal latency, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = latency;
                System.IAsyncResult _result = base.BeginInvoke("ReportLatency", _args, callback, asyncState);
                return _result;
            }
            
            public void EndReportLatency(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("ReportLatency", _args, result);
            }
            
            public System.IAsyncResult BeginLog(TravelJournal.PCL.ServiceReference.LogType type, string log, string callerName, string callerFilePath, int callerLine, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[5];
                _args[0] = type;
                _args[1] = log;
                _args[2] = callerName;
                _args[3] = callerFilePath;
                _args[4] = callerLine;
                System.IAsyncResult _result = base.BeginInvoke("Log", _args, callback, asyncState);
                return _result;
            }
            
            public void EndLog(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("Log", _args, result);
            }
            
            public System.IAsyncResult BeginUpdateInfoInspector(System.Collections.Generic.Dictionary<string, object> infos, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = infos;
                System.IAsyncResult _result = base.BeginInvoke("UpdateInfoInspector", _args, callback, asyncState);
                return _result;
            }
            
            public void EndUpdateInfoInspector(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("UpdateInfoInspector", _args, result);
            }
            
            public System.IAsyncResult BeginUpdatePhotoTreeView(System.Collections.Generic.List<TravelJournal.PCL.ServiceReference.Album> albums, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = albums;
                System.IAsyncResult _result = base.BeginInvoke("UpdatePhotoTreeView", _args, callback, asyncState);
                return _result;
            }
            
            public void EndUpdatePhotoTreeView(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("UpdatePhotoTreeView", _args, result);
            }
            
            public System.IAsyncResult BeginGetCurrentGps(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetCurrentGps", _args, callback, asyncState);
                return _result;
            }
            
            public TravelJournal.PCL.ServiceReference.GpsPoint EndGetCurrentGps(System.IAsyncResult result) {
                object[] _args = new object[0];
                TravelJournal.PCL.ServiceReference.GpsPoint _result = ((TravelJournal.PCL.ServiceReference.GpsPoint)(base.EndInvoke("GetCurrentGps", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetPhotos(System.DateTime filter, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = filter;
                System.IAsyncResult _result = base.BeginInvoke("GetPhotos", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.List<TravelJournal.PCL.ServiceReference.Photo> EndGetPhotos(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.List<TravelJournal.PCL.ServiceReference.Photo> _result = ((System.Collections.Generic.List<TravelJournal.PCL.ServiceReference.Photo>)(base.EndInvoke("GetPhotos", _args, result)));
                return _result;
            }
        }
        
        public enum EndpointConfiguration {
            
            BasicHttpBinding_ISimulationServices,
        }
    }
}
