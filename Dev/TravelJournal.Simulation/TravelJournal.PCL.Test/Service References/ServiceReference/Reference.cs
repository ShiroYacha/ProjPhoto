//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34011
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TravelJournal.PCL.Test.ServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference.IConnectivityTestService")]
    public interface IConnectivityTestService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IConnectivityTestService/StartTest", ReplyAction="http://tempuri.org/IConnectivityTestService/StartTestResponse")]
        System.IAsyncResult BeginStartTest(System.AsyncCallback callback, object asyncState);
        
        bool EndStartTest(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IConnectivityTestServiceChannel : TravelJournal.PCL.Test.ServiceReference.IConnectivityTestService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class StartTestCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public StartTestCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ConnectivityTestServiceClient : System.ServiceModel.ClientBase<TravelJournal.PCL.Test.ServiceReference.IConnectivityTestService>, TravelJournal.PCL.Test.ServiceReference.IConnectivityTestService {
        
        private BeginOperationDelegate onBeginStartTestDelegate;
        
        private EndOperationDelegate onEndStartTestDelegate;
        
        private System.Threading.SendOrPostCallback onStartTestCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public ConnectivityTestServiceClient() : 
                base(ConnectivityTestServiceClient.GetDefaultBinding(), ConnectivityTestServiceClient.GetDefaultEndpointAddress()) {
        }
        
        public ConnectivityTestServiceClient(EndpointConfiguration endpointConfiguration) : 
                base(ConnectivityTestServiceClient.GetBindingForEndpoint(endpointConfiguration), ConnectivityTestServiceClient.GetEndpointAddress(endpointConfiguration)) {
        }
        
        public ConnectivityTestServiceClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(ConnectivityTestServiceClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress)) {
        }
        
        public ConnectivityTestServiceClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(ConnectivityTestServiceClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress) {
        }
        
        public ConnectivityTestServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<StartTestCompletedEventArgs> StartTestCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TravelJournal.PCL.Test.ServiceReference.IConnectivityTestService.BeginStartTest(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginStartTest(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool TravelJournal.PCL.Test.ServiceReference.IConnectivityTestService.EndStartTest(System.IAsyncResult result) {
            return base.Channel.EndStartTest(result);
        }
        
        private System.IAsyncResult OnBeginStartTest(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((TravelJournal.PCL.Test.ServiceReference.IConnectivityTestService)(this)).BeginStartTest(callback, asyncState);
        }
        
        private object[] OnEndStartTest(System.IAsyncResult result) {
            bool retVal = ((TravelJournal.PCL.Test.ServiceReference.IConnectivityTestService)(this)).EndStartTest(result);
            return new object[] {
                    retVal};
        }
        
        private void OnStartTestCompleted(object state) {
            if ((this.StartTestCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.StartTestCompleted(this, new StartTestCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void StartTestAsync() {
            this.StartTestAsync(null);
        }
        
        public void StartTestAsync(object userState) {
            if ((this.onBeginStartTestDelegate == null)) {
                this.onBeginStartTestDelegate = new BeginOperationDelegate(this.OnBeginStartTest);
            }
            if ((this.onEndStartTestDelegate == null)) {
                this.onEndStartTestDelegate = new EndOperationDelegate(this.OnEndStartTest);
            }
            if ((this.onStartTestCompletedDelegate == null)) {
                this.onStartTestCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnStartTestCompleted);
            }
            base.InvokeAsync(this.onBeginStartTestDelegate, null, this.onEndStartTestDelegate, this.onStartTestCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override TravelJournal.PCL.Test.ServiceReference.IConnectivityTestService CreateChannel() {
            return new ConnectivityTestServiceClientChannel(this);
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IConnectivityTestService)) {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.MaxReceivedMessageSize = int.MaxValue;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IConnectivityTestService)) {
                return new System.ServiceModel.EndpointAddress("http://192.168.1.23:8733/Design_Time_Addresses/TravelJournal.WCF/ConnectivityTest" +
                        "Service/");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding() {
            return ConnectivityTestServiceClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_IConnectivityTestService);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress() {
            return ConnectivityTestServiceClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_IConnectivityTestService);
        }
        
        private class ConnectivityTestServiceClientChannel : ChannelBase<TravelJournal.PCL.Test.ServiceReference.IConnectivityTestService>, TravelJournal.PCL.Test.ServiceReference.IConnectivityTestService {
            
            public ConnectivityTestServiceClientChannel(System.ServiceModel.ClientBase<TravelJournal.PCL.Test.ServiceReference.IConnectivityTestService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginStartTest(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("StartTest", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndStartTest(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("StartTest", _args, result)));
                return _result;
            }
        }
        
        public enum EndpointConfiguration {
            
            BasicHttpBinding_IConnectivityTestService,
        }
    }
}
