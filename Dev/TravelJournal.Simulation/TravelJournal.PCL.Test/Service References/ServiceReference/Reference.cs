//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34011
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TravelJournal.PCL.Test.ServiceReference {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ConnectionTestData", Namespace="http://schemas.datacontract.org/2004/07/TravelJournal.WinForm.Simulator")]
    public partial class ConnectionTestData : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int[] DataField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int[] Data {
            get {
                return this.DataField;
            }
            set {
                if ((object.ReferenceEquals(this.DataField, value) != true)) {
                    this.DataField = value;
                    this.RaisePropertyChanged("Data");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference.IConnectionService")]
    public interface IConnectionService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IConnectionService/Connect", ReplyAction="http://tempuri.org/IConnectionService/ConnectResponse")]
        System.IAsyncResult BeginConnect(string deviceName, System.AsyncCallback callback, object asyncState);
        
        bool EndConnect(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IConnectionService/PrepareTestData", ReplyAction="http://tempuri.org/IConnectionService/PrepareTestDataResponse")]
        System.IAsyncResult BeginPrepareTestData(long size, System.AsyncCallback callback, object asyncState);
        
        void EndPrepareTestData(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IConnectionService/GetTestData", ReplyAction="http://tempuri.org/IConnectionService/GetTestDataResponse")]
        System.IAsyncResult BeginGetTestData(System.AsyncCallback callback, object asyncState);
        
        TravelJournal.PCL.Test.ServiceReference.ConnectionTestData EndGetTestData(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IConnectionService/ReportLatency", ReplyAction="http://tempuri.org/IConnectionService/ReportLatencyResponse")]
        System.IAsyncResult BeginReportLatency(decimal latency, System.AsyncCallback callback, object asyncState);
        
        void EndReportLatency(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IConnectionServiceChannel : TravelJournal.PCL.Test.ServiceReference.IConnectionService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ConnectCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ConnectCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetTestDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetTestDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TravelJournal.PCL.Test.ServiceReference.ConnectionTestData Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TravelJournal.PCL.Test.ServiceReference.ConnectionTestData)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ConnectionServiceClient : System.ServiceModel.ClientBase<TravelJournal.PCL.Test.ServiceReference.IConnectionService>, TravelJournal.PCL.Test.ServiceReference.IConnectionService {
        
        private BeginOperationDelegate onBeginConnectDelegate;
        
        private EndOperationDelegate onEndConnectDelegate;
        
        private System.Threading.SendOrPostCallback onConnectCompletedDelegate;
        
        private BeginOperationDelegate onBeginPrepareTestDataDelegate;
        
        private EndOperationDelegate onEndPrepareTestDataDelegate;
        
        private System.Threading.SendOrPostCallback onPrepareTestDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetTestDataDelegate;
        
        private EndOperationDelegate onEndGetTestDataDelegate;
        
        private System.Threading.SendOrPostCallback onGetTestDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginReportLatencyDelegate;
        
        private EndOperationDelegate onEndReportLatencyDelegate;
        
        private System.Threading.SendOrPostCallback onReportLatencyCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public ConnectionServiceClient() : 
                base(ConnectionServiceClient.GetDefaultBinding(), ConnectionServiceClient.GetDefaultEndpointAddress()) {
        }
        
        public ConnectionServiceClient(EndpointConfiguration endpointConfiguration) : 
                base(ConnectionServiceClient.GetBindingForEndpoint(endpointConfiguration), ConnectionServiceClient.GetEndpointAddress(endpointConfiguration)) {
        }
        
        public ConnectionServiceClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(ConnectionServiceClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress)) {
        }
        
        public ConnectionServiceClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(ConnectionServiceClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress) {
        }
        
        public ConnectionServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<ConnectCompletedEventArgs> ConnectCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> PrepareTestDataCompleted;
        
        public event System.EventHandler<GetTestDataCompletedEventArgs> GetTestDataCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> ReportLatencyCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TravelJournal.PCL.Test.ServiceReference.IConnectionService.BeginConnect(string deviceName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginConnect(deviceName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool TravelJournal.PCL.Test.ServiceReference.IConnectionService.EndConnect(System.IAsyncResult result) {
            return base.Channel.EndConnect(result);
        }
        
        private System.IAsyncResult OnBeginConnect(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string deviceName = ((string)(inValues[0]));
            return ((TravelJournal.PCL.Test.ServiceReference.IConnectionService)(this)).BeginConnect(deviceName, callback, asyncState);
        }
        
        private object[] OnEndConnect(System.IAsyncResult result) {
            bool retVal = ((TravelJournal.PCL.Test.ServiceReference.IConnectionService)(this)).EndConnect(result);
            return new object[] {
                    retVal};
        }
        
        private void OnConnectCompleted(object state) {
            if ((this.ConnectCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ConnectCompleted(this, new ConnectCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ConnectAsync(string deviceName) {
            this.ConnectAsync(deviceName, null);
        }
        
        public void ConnectAsync(string deviceName, object userState) {
            if ((this.onBeginConnectDelegate == null)) {
                this.onBeginConnectDelegate = new BeginOperationDelegate(this.OnBeginConnect);
            }
            if ((this.onEndConnectDelegate == null)) {
                this.onEndConnectDelegate = new EndOperationDelegate(this.OnEndConnect);
            }
            if ((this.onConnectCompletedDelegate == null)) {
                this.onConnectCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnConnectCompleted);
            }
            base.InvokeAsync(this.onBeginConnectDelegate, new object[] {
                        deviceName}, this.onEndConnectDelegate, this.onConnectCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TravelJournal.PCL.Test.ServiceReference.IConnectionService.BeginPrepareTestData(long size, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginPrepareTestData(size, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void TravelJournal.PCL.Test.ServiceReference.IConnectionService.EndPrepareTestData(System.IAsyncResult result) {
            base.Channel.EndPrepareTestData(result);
        }
        
        private System.IAsyncResult OnBeginPrepareTestData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            long size = ((long)(inValues[0]));
            return ((TravelJournal.PCL.Test.ServiceReference.IConnectionService)(this)).BeginPrepareTestData(size, callback, asyncState);
        }
        
        private object[] OnEndPrepareTestData(System.IAsyncResult result) {
            ((TravelJournal.PCL.Test.ServiceReference.IConnectionService)(this)).EndPrepareTestData(result);
            return null;
        }
        
        private void OnPrepareTestDataCompleted(object state) {
            if ((this.PrepareTestDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.PrepareTestDataCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void PrepareTestDataAsync(long size) {
            this.PrepareTestDataAsync(size, null);
        }
        
        public void PrepareTestDataAsync(long size, object userState) {
            if ((this.onBeginPrepareTestDataDelegate == null)) {
                this.onBeginPrepareTestDataDelegate = new BeginOperationDelegate(this.OnBeginPrepareTestData);
            }
            if ((this.onEndPrepareTestDataDelegate == null)) {
                this.onEndPrepareTestDataDelegate = new EndOperationDelegate(this.OnEndPrepareTestData);
            }
            if ((this.onPrepareTestDataCompletedDelegate == null)) {
                this.onPrepareTestDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnPrepareTestDataCompleted);
            }
            base.InvokeAsync(this.onBeginPrepareTestDataDelegate, new object[] {
                        size}, this.onEndPrepareTestDataDelegate, this.onPrepareTestDataCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TravelJournal.PCL.Test.ServiceReference.IConnectionService.BeginGetTestData(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetTestData(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TravelJournal.PCL.Test.ServiceReference.ConnectionTestData TravelJournal.PCL.Test.ServiceReference.IConnectionService.EndGetTestData(System.IAsyncResult result) {
            return base.Channel.EndGetTestData(result);
        }
        
        private System.IAsyncResult OnBeginGetTestData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((TravelJournal.PCL.Test.ServiceReference.IConnectionService)(this)).BeginGetTestData(callback, asyncState);
        }
        
        private object[] OnEndGetTestData(System.IAsyncResult result) {
            TravelJournal.PCL.Test.ServiceReference.ConnectionTestData retVal = ((TravelJournal.PCL.Test.ServiceReference.IConnectionService)(this)).EndGetTestData(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetTestDataCompleted(object state) {
            if ((this.GetTestDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetTestDataCompleted(this, new GetTestDataCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetTestDataAsync() {
            this.GetTestDataAsync(null);
        }
        
        public void GetTestDataAsync(object userState) {
            if ((this.onBeginGetTestDataDelegate == null)) {
                this.onBeginGetTestDataDelegate = new BeginOperationDelegate(this.OnBeginGetTestData);
            }
            if ((this.onEndGetTestDataDelegate == null)) {
                this.onEndGetTestDataDelegate = new EndOperationDelegate(this.OnEndGetTestData);
            }
            if ((this.onGetTestDataCompletedDelegate == null)) {
                this.onGetTestDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetTestDataCompleted);
            }
            base.InvokeAsync(this.onBeginGetTestDataDelegate, null, this.onEndGetTestDataDelegate, this.onGetTestDataCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TravelJournal.PCL.Test.ServiceReference.IConnectionService.BeginReportLatency(decimal latency, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginReportLatency(latency, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void TravelJournal.PCL.Test.ServiceReference.IConnectionService.EndReportLatency(System.IAsyncResult result) {
            base.Channel.EndReportLatency(result);
        }
        
        private System.IAsyncResult OnBeginReportLatency(object[] inValues, System.AsyncCallback callback, object asyncState) {
            decimal latency = ((decimal)(inValues[0]));
            return ((TravelJournal.PCL.Test.ServiceReference.IConnectionService)(this)).BeginReportLatency(latency, callback, asyncState);
        }
        
        private object[] OnEndReportLatency(System.IAsyncResult result) {
            ((TravelJournal.PCL.Test.ServiceReference.IConnectionService)(this)).EndReportLatency(result);
            return null;
        }
        
        private void OnReportLatencyCompleted(object state) {
            if ((this.ReportLatencyCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ReportLatencyCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ReportLatencyAsync(decimal latency) {
            this.ReportLatencyAsync(latency, null);
        }
        
        public void ReportLatencyAsync(decimal latency, object userState) {
            if ((this.onBeginReportLatencyDelegate == null)) {
                this.onBeginReportLatencyDelegate = new BeginOperationDelegate(this.OnBeginReportLatency);
            }
            if ((this.onEndReportLatencyDelegate == null)) {
                this.onEndReportLatencyDelegate = new EndOperationDelegate(this.OnEndReportLatency);
            }
            if ((this.onReportLatencyCompletedDelegate == null)) {
                this.onReportLatencyCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnReportLatencyCompleted);
            }
            base.InvokeAsync(this.onBeginReportLatencyDelegate, new object[] {
                        latency}, this.onEndReportLatencyDelegate, this.onReportLatencyCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override TravelJournal.PCL.Test.ServiceReference.IConnectionService CreateChannel() {
            return new ConnectionServiceClientChannel(this);
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IConnectionService)) {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.MaxReceivedMessageSize = int.MaxValue;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IConnectionService)) {
                return new System.ServiceModel.EndpointAddress("http://192.168.1.23:8733/Design_Time_Addresses/TravelJournal.WinForm.Simulator/Co" +
                        "nnectionService/");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding() {
            return ConnectionServiceClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_IConnectionService);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress() {
            return ConnectionServiceClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_IConnectionService);
        }
        
        private class ConnectionServiceClientChannel : ChannelBase<TravelJournal.PCL.Test.ServiceReference.IConnectionService>, TravelJournal.PCL.Test.ServiceReference.IConnectionService {
            
            public ConnectionServiceClientChannel(System.ServiceModel.ClientBase<TravelJournal.PCL.Test.ServiceReference.IConnectionService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginConnect(string deviceName, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = deviceName;
                System.IAsyncResult _result = base.BeginInvoke("Connect", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndConnect(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("Connect", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginPrepareTestData(long size, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = size;
                System.IAsyncResult _result = base.BeginInvoke("PrepareTestData", _args, callback, asyncState);
                return _result;
            }
            
            public void EndPrepareTestData(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("PrepareTestData", _args, result);
            }
            
            public System.IAsyncResult BeginGetTestData(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetTestData", _args, callback, asyncState);
                return _result;
            }
            
            public TravelJournal.PCL.Test.ServiceReference.ConnectionTestData EndGetTestData(System.IAsyncResult result) {
                object[] _args = new object[0];
                TravelJournal.PCL.Test.ServiceReference.ConnectionTestData _result = ((TravelJournal.PCL.Test.ServiceReference.ConnectionTestData)(base.EndInvoke("GetTestData", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginReportLatency(decimal latency, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = latency;
                System.IAsyncResult _result = base.BeginInvoke("ReportLatency", _args, callback, asyncState);
                return _result;
            }
            
            public void EndReportLatency(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("ReportLatency", _args, result);
            }
        }
        
        public enum EndpointConfiguration {
            
            BasicHttpBinding_IConnectionService,
        }
    }
}
